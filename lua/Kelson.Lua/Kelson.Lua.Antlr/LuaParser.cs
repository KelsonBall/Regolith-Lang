//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Lua.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, NAME=56, NORMALSTRING=57, CHARSTRING=58, 
		LONGSTRING=59, INT=60, HEX=61, FLOAT=62, HEX_FLOAT=63, COMMENT=64, LINE_COMMENT=65, 
		WS=66, SHEBANG=67;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_stat_empty = 3, RULE_stat_globalassign = 4, 
		RULE_stat_functioncall = 5, RULE_stat_label = 6, RULE_stat_break = 7, 
		RULE_stat_goto = 8, RULE_stat_do = 9, RULE_stat_while = 10, RULE_stat_repeat = 11, 
		RULE_stat_if = 12, RULE_stat_fornum = 13, RULE_stat_foriter = 14, RULE_stat_functiondef = 15, 
		RULE_stat_localfunctiondef = 16, RULE_stat_localassignment = 17, RULE_retstat = 18, 
		RULE_label = 19, RULE_funcname = 20, RULE_varlist = 21, RULE_namelist = 22, 
		RULE_explist = 23, RULE_exp = 24, RULE_exp_nil = 25, RULE_exp_bool = 26, 
		RULE_exp_number = 27, RULE_exp_string = 28, RULE_exp_params = 29, RULE_exp_functiondef = 30, 
		RULE_exp_prefixexp = 31, RULE_exp_tableconstructor = 32, RULE_exp_unary = 33, 
		RULE_binaryop = 34, RULE_prefixexp = 35, RULE_functioncall = 36, RULE_varOrExp = 37, 
		RULE_var = 38, RULE_varSuffix = 39, RULE_nameAndArgs = 40, RULE_args = 41, 
		RULE_functiondef = 42, RULE_funcbody = 43, RULE_parlist = 44, RULE_tableconstructor = 45, 
		RULE_fieldlist = 46, RULE_field = 47, RULE_fieldsep = 48, RULE_operatorOr = 49, 
		RULE_operatorAnd = 50, RULE_operatorComparison = 51, RULE_operatorStrcat = 52, 
		RULE_operatorAddSub = 53, RULE_operatorMulDivMod = 54, RULE_operatorBitwise = 55, 
		RULE_operatorUnary = 56, RULE_operatorPower = 57, RULE_number = 58, RULE_string = 59;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "stat_empty", "stat_globalassign", "stat_functioncall", 
		"stat_label", "stat_break", "stat_goto", "stat_do", "stat_while", "stat_repeat", 
		"stat_if", "stat_fornum", "stat_foriter", "stat_functiondef", "stat_localfunctiondef", 
		"stat_localassignment", "retstat", "label", "funcname", "varlist", "namelist", 
		"explist", "exp", "exp_nil", "exp_bool", "exp_number", "exp_string", "exp_params", 
		"exp_functiondef", "exp_prefixexp", "exp_tableconstructor", "exp_unary", 
		"binaryop", "prefixexp", "functioncall", "varOrExp", "var", "varSuffix", 
		"nameAndArgs", "args", "functiondef", "funcbody", "parlist", "tableconstructor", 
		"fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorBitwise", 
		"operatorUnary", "operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'goto'", "'do'", "'end'", "'while'", "'repeat'", 
		"'until'", "'if'", "'then'", "'elseif'", "'else'", "'for'", "','", "'in'", 
		"'function'", "'local'", "'return'", "'::'", "'.'", "':'", "'nil'", "'false'", 
		"'true'", "'...'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'or'", "'and'", 
		"'<'", "'>'", "'<='", "'>='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'//'", "'&'", "'|'", "'~'", "'<<'", "'>>'", "'not'", "'#'", 
		"'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NAME", "NORMALSTRING", 
		"CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", "COMMENT", 
		"LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LuaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LuaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LuaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ChunkContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; block();
			State = 121; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__9) | (1L << T__13) | (1L << T__16) | (1L << T__17) | (1L << T__19) | (1L << T__26) | (1L << NAME))) != 0)) {
				{
				{
				State = 123; stat();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 129; retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public Stat_emptyContext stat_empty() {
			return GetRuleContext<Stat_emptyContext>(0);
		}
		public Stat_globalassignContext stat_globalassign() {
			return GetRuleContext<Stat_globalassignContext>(0);
		}
		public Stat_functioncallContext stat_functioncall() {
			return GetRuleContext<Stat_functioncallContext>(0);
		}
		public Stat_labelContext stat_label() {
			return GetRuleContext<Stat_labelContext>(0);
		}
		public Stat_breakContext stat_break() {
			return GetRuleContext<Stat_breakContext>(0);
		}
		public Stat_gotoContext stat_goto() {
			return GetRuleContext<Stat_gotoContext>(0);
		}
		public Stat_doContext stat_do() {
			return GetRuleContext<Stat_doContext>(0);
		}
		public Stat_whileContext stat_while() {
			return GetRuleContext<Stat_whileContext>(0);
		}
		public Stat_repeatContext stat_repeat() {
			return GetRuleContext<Stat_repeatContext>(0);
		}
		public Stat_ifContext stat_if() {
			return GetRuleContext<Stat_ifContext>(0);
		}
		public Stat_fornumContext stat_fornum() {
			return GetRuleContext<Stat_fornumContext>(0);
		}
		public Stat_foriterContext stat_foriter() {
			return GetRuleContext<Stat_foriterContext>(0);
		}
		public Stat_functiondefContext stat_functiondef() {
			return GetRuleContext<Stat_functiondefContext>(0);
		}
		public Stat_localfunctiondefContext stat_localfunctiondef() {
			return GetRuleContext<Stat_localfunctiondefContext>(0);
		}
		public Stat_localassignmentContext stat_localassignment() {
			return GetRuleContext<Stat_localassignmentContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; stat_empty();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; stat_globalassign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; stat_functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135; stat_label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 136; stat_break();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137; stat_goto();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 138; stat_do();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 139; stat_while();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 140; stat_repeat();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 141; stat_if();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 142; stat_fornum();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 143; stat_foriter();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 144; stat_functiondef();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 145; stat_localfunctiondef();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 146; stat_localassignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_emptyContext : ParserRuleContext {
		public Stat_emptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_empty; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_empty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_empty(this);
		}
	}

	[RuleVersion(0)]
	public Stat_emptyContext stat_empty() {
		Stat_emptyContext _localctx = new Stat_emptyContext(Context, State);
		EnterRule(_localctx, 6, RULE_stat_empty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_globalassignContext : ParserRuleContext {
		public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Stat_globalassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_globalassign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_globalassign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_globalassign(this);
		}
	}

	[RuleVersion(0)]
	public Stat_globalassignContext stat_globalassign() {
		Stat_globalassignContext _localctx = new Stat_globalassignContext(Context, State);
		EnterRule(_localctx, 8, RULE_stat_globalassign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; varlist();
			State = 152; Match(T__1);
			State = 153; explist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functioncallContext : ParserRuleContext {
		public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public Stat_functioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_functioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_functioncall(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functioncallContext stat_functioncall() {
		Stat_functioncallContext _localctx = new Stat_functioncallContext(Context, State);
		EnterRule(_localctx, 10, RULE_stat_functioncall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; functioncall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_labelContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Stat_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_label(this);
		}
	}

	[RuleVersion(0)]
	public Stat_labelContext stat_label() {
		Stat_labelContext _localctx = new Stat_labelContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_breakContext : ParserRuleContext {
		public Stat_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_break; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_break(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_break(this);
		}
	}

	[RuleVersion(0)]
	public Stat_breakContext stat_break() {
		Stat_breakContext _localctx = new Stat_breakContext(Context, State);
		EnterRule(_localctx, 14, RULE_stat_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_gotoContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public Stat_gotoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_goto; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_goto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_goto(this);
		}
	}

	[RuleVersion(0)]
	public Stat_gotoContext stat_goto() {
		Stat_gotoContext _localctx = new Stat_gotoContext(Context, State);
		EnterRule(_localctx, 16, RULE_stat_goto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(T__3);
			State = 162; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_doContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_doContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_do; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_do(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_do(this);
		}
	}

	[RuleVersion(0)]
	public Stat_doContext stat_do() {
		Stat_doContext _localctx = new Stat_doContext(Context, State);
		EnterRule(_localctx, 18, RULE_stat_do);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(T__4);
			State = 165; block();
			State = 166; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_whileContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_while(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_while(this);
		}
	}

	[RuleVersion(0)]
	public Stat_whileContext stat_while() {
		Stat_whileContext _localctx = new Stat_whileContext(Context, State);
		EnterRule(_localctx, 20, RULE_stat_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(T__6);
			State = 169; exp(0);
			State = 170; Match(T__4);
			State = 171; block();
			State = 172; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_repeatContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Stat_repeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_repeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_repeat(this);
		}
	}

	[RuleVersion(0)]
	public Stat_repeatContext stat_repeat() {
		Stat_repeatContext _localctx = new Stat_repeatContext(Context, State);
		EnterRule(_localctx, 22, RULE_stat_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__7);
			State = 175; block();
			State = 176; Match(T__8);
			State = 177; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_ifContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public Stat_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_if(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_if(this);
		}
	}

	[RuleVersion(0)]
	public Stat_ifContext stat_if() {
		Stat_ifContext _localctx = new Stat_ifContext(Context, State);
		EnterRule(_localctx, 24, RULE_stat_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(T__9);
			State = 180; exp(0);
			State = 181; Match(T__10);
			State = 182; block();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 183; Match(T__11);
				State = 184; exp(0);
				State = 185; Match(T__10);
				State = 186; block();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 193; Match(T__12);
				State = 194; block();
				}
			}

			State = 197; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_fornumContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_fornumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_fornum; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_fornum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_fornum(this);
		}
	}

	[RuleVersion(0)]
	public Stat_fornumContext stat_fornum() {
		Stat_fornumContext _localctx = new Stat_fornumContext(Context, State);
		EnterRule(_localctx, 26, RULE_stat_fornum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(T__13);
			State = 200; Match(NAME);
			State = 201; Match(T__1);
			State = 202; exp(0);
			State = 203; Match(T__14);
			State = 204; exp(0);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 205; Match(T__14);
				State = 206; exp(0);
				}
			}

			State = 209; Match(T__4);
			State = 210; block();
			State = 211; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_foriterContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stat_foriterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_foriter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_foriter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_foriter(this);
		}
	}

	[RuleVersion(0)]
	public Stat_foriterContext stat_foriter() {
		Stat_foriterContext _localctx = new Stat_foriterContext(Context, State);
		EnterRule(_localctx, 28, RULE_stat_foriter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(T__13);
			State = 214; namelist();
			State = 215; Match(T__15);
			State = 216; explist();
			State = 217; Match(T__4);
			State = 218; block();
			State = 219; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functiondefContext : ParserRuleContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public Stat_functiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_functiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_functiondef(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functiondefContext stat_functiondef() {
		Stat_functiondefContext _localctx = new Stat_functiondefContext(Context, State);
		EnterRule(_localctx, 30, RULE_stat_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__16);
			State = 222; funcname();
			State = 223; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_localfunctiondefContext : ParserRuleContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public Stat_localfunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_localfunctiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_localfunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_localfunctiondef(this);
		}
	}

	[RuleVersion(0)]
	public Stat_localfunctiondefContext stat_localfunctiondef() {
		Stat_localfunctiondefContext _localctx = new Stat_localfunctiondefContext(Context, State);
		EnterRule(_localctx, 32, RULE_stat_localfunctiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(T__17);
			State = 226; Match(T__16);
			State = 227; funcname();
			State = 228; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_localassignmentContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Stat_localassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_localassignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterStat_localassignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitStat_localassignment(this);
		}
	}

	[RuleVersion(0)]
	public Stat_localassignmentContext stat_localassignment() {
		Stat_localassignmentContext _localctx = new Stat_localassignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_stat_localassignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(T__17);
			State = 231; namelist();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 232; Match(T__1);
				State = 233; explist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(Context, State);
		EnterRule(_localctx, 36, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(T__18);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 237; explist();
				}
			}

			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 240; Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 38, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(T__19);
			State = 244; Match(NAME);
			State = 245; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 40, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(NAME);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20) {
				{
				{
				State = 248; Match(T__20);
				State = 249; Match(NAME);
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 255; Match(T__21);
				State = 256; Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 42, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; var();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 260; Match(T__14);
				State = 261; var();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 44, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(NAME);
			State = 272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 268; Match(T__14);
					State = 269; Match(NAME);
					}
					} 
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 46, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; exp(0);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 276; Match(T__14);
				State = 277; exp(0);
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public Exp_nilContext exp_nil() {
			return GetRuleContext<Exp_nilContext>(0);
		}
		public Exp_boolContext exp_bool() {
			return GetRuleContext<Exp_boolContext>(0);
		}
		public Exp_numberContext exp_number() {
			return GetRuleContext<Exp_numberContext>(0);
		}
		public Exp_stringContext exp_string() {
			return GetRuleContext<Exp_stringContext>(0);
		}
		public Exp_paramsContext exp_params() {
			return GetRuleContext<Exp_paramsContext>(0);
		}
		public Exp_functiondefContext exp_functiondef() {
			return GetRuleContext<Exp_functiondefContext>(0);
		}
		public Exp_prefixexpContext exp_prefixexp() {
			return GetRuleContext<Exp_prefixexpContext>(0);
		}
		public Exp_tableconstructorContext exp_tableconstructor() {
			return GetRuleContext<Exp_tableconstructorContext>(0);
		}
		public Exp_unaryContext exp_unary() {
			return GetRuleContext<Exp_unaryContext>(0);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BinaryopContext binaryop() {
			return GetRuleContext<BinaryopContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				{
				State = 284; exp_nil();
				}
				break;
			case T__23:
			case T__24:
				{
				State = 285; exp_bool();
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 286; exp_number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 287; exp_string();
				}
				break;
			case T__25:
				{
				State = 288; exp_params();
				}
				break;
			case T__16:
				{
				State = 289; exp_functiondef();
				}
				break;
			case T__26:
			case NAME:
				{
				State = 290; exp_prefixexp();
				}
				break;
			case T__30:
				{
				State = 291; exp_tableconstructor();
				}
				break;
			case T__42:
			case T__49:
			case T__52:
			case T__53:
				{
				State = 292; exp_unary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 301;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exp);
					State = 295;
					if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
					State = 296; binaryop();
					State = 297; exp(11);
					}
					} 
				}
				State = 303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Exp_nilContext : ParserRuleContext {
		public Exp_nilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_nil; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_nil(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_nil(this);
		}
	}

	[RuleVersion(0)]
	public Exp_nilContext exp_nil() {
		Exp_nilContext _localctx = new Exp_nilContext(Context, State);
		EnterRule(_localctx, 50, RULE_exp_nil);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_boolContext : ParserRuleContext {
		public Exp_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_bool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_bool(this);
		}
	}

	[RuleVersion(0)]
	public Exp_boolContext exp_bool() {
		Exp_boolContext _localctx = new Exp_boolContext(Context, State);
		EnterRule(_localctx, 52, RULE_exp_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_la = TokenStream.LA(1);
			if ( !(_la==T__23 || _la==T__24) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_numberContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public Exp_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_number(this);
		}
	}

	[RuleVersion(0)]
	public Exp_numberContext exp_number() {
		Exp_numberContext _localctx = new Exp_numberContext(Context, State);
		EnterRule(_localctx, 54, RULE_exp_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_stringContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Exp_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_string(this);
		}
	}

	[RuleVersion(0)]
	public Exp_stringContext exp_string() {
		Exp_stringContext _localctx = new Exp_stringContext(Context, State);
		EnterRule(_localctx, 56, RULE_exp_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_paramsContext : ParserRuleContext {
		public Exp_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_params(this);
		}
	}

	[RuleVersion(0)]
	public Exp_paramsContext exp_params() {
		Exp_paramsContext _localctx = new Exp_paramsContext(Context, State);
		EnterRule(_localctx, 58, RULE_exp_params);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_functiondefContext : ParserRuleContext {
		public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		public Exp_functiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_functiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_functiondef(this);
		}
	}

	[RuleVersion(0)]
	public Exp_functiondefContext exp_functiondef() {
		Exp_functiondefContext _localctx = new Exp_functiondefContext(Context, State);
		EnterRule(_localctx, 60, RULE_exp_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; functiondef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_prefixexpContext : ParserRuleContext {
		public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		public Exp_prefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_prefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_prefixexp(this);
		}
	}

	[RuleVersion(0)]
	public Exp_prefixexpContext exp_prefixexp() {
		Exp_prefixexpContext _localctx = new Exp_prefixexpContext(Context, State);
		EnterRule(_localctx, 62, RULE_exp_prefixexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; prefixexp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_tableconstructorContext : ParserRuleContext {
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public Exp_tableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_tableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_tableconstructor(this);
		}
	}

	[RuleVersion(0)]
	public Exp_tableconstructorContext exp_tableconstructor() {
		Exp_tableconstructorContext _localctx = new Exp_tableconstructorContext(Context, State);
		EnterRule(_localctx, 64, RULE_exp_tableconstructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; tableconstructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_unaryContext : ParserRuleContext {
		public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_unary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterExp_unary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitExp_unary(this);
		}
	}

	[RuleVersion(0)]
	public Exp_unaryContext exp_unary() {
		Exp_unaryContext _localctx = new Exp_unaryContext(Context, State);
		EnterRule(_localctx, 66, RULE_exp_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; operatorUnary();
			State = 321; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryopContext : ParserRuleContext {
		public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public BinaryopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterBinaryop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitBinaryop(this);
		}
	}

	[RuleVersion(0)]
	public BinaryopContext binaryop() {
		BinaryopContext _localctx = new BinaryopContext(Context, State);
		EnterRule(_localctx, 68, RULE_binaryop);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__43:
			case T__44:
			case T__45:
			case T__46:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; operatorMulDivMod();
				}
				break;
			case T__41:
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324; operatorAddSub();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 3);
				{
				State = 325; operatorStrcat();
				}
				break;
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
				EnterOuterAlt(_localctx, 4);
				{
				State = 326; operatorComparison();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 5);
				{
				State = 327; operatorAnd();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 6);
				{
				State = 328; operatorOr();
				}
				break;
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
				EnterOuterAlt(_localctx, 7);
				{
				State = 329; operatorBitwise();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 70, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; varOrExp();
			State = 336;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 333; nameAndArgs();
					}
					} 
				}
				State = 338;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 72, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; varOrExp();
			State = 341;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 340; nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 74, RULE_varOrExp);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; Match(T__26);
				State = 347; exp(0);
				State = 348; Match(T__27);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 76, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 352; Match(NAME);
				}
				break;
			case T__26:
				{
				State = 353; Match(T__26);
				State = 354; exp(0);
				State = 355; Match(T__27);
				State = 356; varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 363;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 360; varSuffix();
					}
					} 
				}
				State = 365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 78, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__26) | (1L << T__30) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) {
				{
				{
				State = 366; nameAndArgs();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				{
				State = 372; Match(T__28);
				State = 373; exp(0);
				State = 374; Match(T__29);
				}
				break;
			case T__20:
				{
				State = 376; Match(T__20);
				State = 377; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 80, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 380; Match(T__21);
				State = 381; Match(NAME);
				}
			}

			State = 384; args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 82, RULE_args);
		int _la;
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386; Match(T__26);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
					{
					State = 387; explist();
					}
				}

				State = 390; Match(T__27);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 84, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(T__16);
			State = 396; funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 86, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T__26);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25 || _la==NAME) {
				{
				State = 399; parlist();
				}
			}

			State = 402; Match(T__27);
			State = 403; block();
			State = 404; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 88, RULE_parlist);
		int _la;
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406; namelist();
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__14) {
					{
					State = 407; Match(T__14);
					State = 408; Match(T__25);
					}
				}

				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 90, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(T__30);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__28) | (1L << T__30) | (1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53) | (1L << NAME) | (1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING) | (1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) {
				{
				State = 415; fieldlist();
				}
			}

			State = 418; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 92, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; field();
			State = 426;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 421; fieldsep();
					State = 422; field();
					}
					} 
				}
				State = 428;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__14) {
				{
				State = 429; fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 94, RULE_field);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432; Match(T__28);
				State = 433; exp(0);
				State = 434; Match(T__29);
				State = 435; Match(T__1);
				State = 436; exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438; Match(NAME);
				State = 439; Match(T__1);
				State = 440; exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 441; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 96, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 98, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 100, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 102, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 104, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 106, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_la = TokenStream.LA(1);
			if ( !(_la==T__41 || _la==T__42) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 108, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 110, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 112, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__42) | (1L << T__49) | (1L << T__52) | (1L << T__53))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 114, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(T__54);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
		public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		public ITerminalNode HEX_FLOAT() { return GetToken(LuaParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 116, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << HEX) | (1L << FLOAT) | (1L << HEX_FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILuaListener typedListener = listener as ILuaListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 118, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NORMALSTRING) | (1L << CHARSTRING) | (1L << LONGSTRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x45', '\x1D7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\a', '\x3', '\x7F', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x82', '\v', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x85', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x96', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xBF', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xC2', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xC6', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xD2', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\xED', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xF1', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\xF4', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xFD', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x100', '\v', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x104', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x109', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x10C', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\a', '\x18', '\x111', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x114', 
		'\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x119', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x11C', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\x128', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x12E', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x131', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x5', '$', '\x14D', '\n', '$', '\x3', '%', '\x3', '%', '\a', 
		'%', '\x151', '\n', '%', '\f', '%', '\xE', '%', '\x154', '\v', '%', '\x3', 
		'&', '\x3', '&', '\x6', '&', '\x158', '\n', '&', '\r', '&', '\xE', '&', 
		'\x159', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x5', '\'', '\x161', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x169', '\n', '(', '\x3', 
		'(', '\a', '(', '\x16C', '\n', '(', '\f', '(', '\xE', '(', '\x16F', '\v', 
		'(', '\x3', ')', '\a', ')', '\x172', '\n', ')', '\f', ')', '\xE', ')', 
		'\x175', '\v', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x17D', '\n', ')', '\x3', '*', '\x3', '*', 
		'\x5', '*', '\x181', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x187', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x5', '+', '\x18C', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x5', '-', '\x193', '\n', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', 
		'\x19C', '\n', '.', '\x3', '.', '\x5', '.', '\x19F', '\n', '.', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x1A3', '\n', '/', '\x3', '/', '\x3', '/', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', 
		'\x1AB', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x1AE', '\v', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x1B1', '\n', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x1BD', 
		'\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', 
		';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x2', 
		'\x3', '\x32', '>', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', '\x2', '\v', '\x3', '\x2', '\x1A', '\x1B', 
		'\x4', '\x2', '\x3', '\x3', '\x11', '\x11', '\x3', '\x2', '%', '*', '\x3', 
		'\x2', ',', '-', '\x3', '\x2', '.', '\x31', '\x3', '\x2', '\x32', '\x36', 
		'\x5', '\x2', '-', '-', '\x34', '\x34', '\x37', '\x38', '\x3', '\x2', 
		'>', '\x41', '\x3', '\x2', ';', '=', '\x2', '\x1D7', '\x2', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x80', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\b', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x99', '\x3', '\x2', '\x2', '\x2', '\f', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x16', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\xD7', '\x3', '\x2', '\x2', '\x2', ' ', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\xE3', '\x3', '\x2', '\x2', '\x2', '$', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xEE', '\x3', '\x2', '\x2', '\x2', '(', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '*', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', ',', '\x105', '\x3', '\x2', '\x2', '\x2', '.', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x115', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x34', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x134', '\x3', '\x2', '\x2', '\x2', '\x38', '\x136', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x138', '\x3', '\x2', '\x2', '\x2', '<', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x42', '\x140', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x142', '\x3', '\x2', '\x2', '\x2', '\x46', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x155', '\x3', '\x2', '\x2', '\x2', 'L', '\x160', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x168', '\x3', '\x2', '\x2', '\x2', 'P', '\x173', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x18B', '\x3', '\x2', '\x2', '\x2', 'V', '\x18D', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x190', '\x3', '\x2', '\x2', '\x2', 'Z', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x1A6', '\x3', '\x2', '\x2', '\x2', '`', '\x1BC', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1C0', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x1C4', '\x3', '\x2', '\x2', '\x2', 'j', '\x1C6', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x1C8', '\x3', '\x2', '\x2', '\x2', 'n', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x1CE', '\x3', '\x2', '\x2', '\x2', 't', '\x1D0', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x1D2', '\x3', '\x2', '\x2', '\x2', 'x', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', 'z', '{', '\x5', '\x4', '\x3', '\x2', '{', 
		'|', '\a', '\x2', '\x2', '\x3', '|', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x7F', '\x5', '\x6', '\x4', '\x2', '~', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x85', '\x5', '&', '\x14', '\x2', '\x84', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x86', '\x96', '\x5', '\b', '\x5', 
		'\x2', '\x87', '\x96', '\x5', '\n', '\x6', '\x2', '\x88', '\x96', '\x5', 
		'\f', '\a', '\x2', '\x89', '\x96', '\x5', '\xE', '\b', '\x2', '\x8A', 
		'\x96', '\x5', '\x10', '\t', '\x2', '\x8B', '\x96', '\x5', '\x12', '\n', 
		'\x2', '\x8C', '\x96', '\x5', '\x14', '\v', '\x2', '\x8D', '\x96', '\x5', 
		'\x16', '\f', '\x2', '\x8E', '\x96', '\x5', '\x18', '\r', '\x2', '\x8F', 
		'\x96', '\x5', '\x1A', '\xE', '\x2', '\x90', '\x96', '\x5', '\x1C', '\xF', 
		'\x2', '\x91', '\x96', '\x5', '\x1E', '\x10', '\x2', '\x92', '\x96', '\x5', 
		' ', '\x11', '\x2', '\x93', '\x96', '\x5', '\"', '\x12', '\x2', '\x94', 
		'\x96', '\x5', '$', '\x13', '\x2', '\x95', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x87', '\x3', '\x2', '\x2', '\x2', '\x95', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x89', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x95', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x91', '\x3', '\x2', '\x2', '\x2', '\x95', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\a', '\x3', '\x2', '\x2', '\x98', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x5', ',', '\x17', '\x2', '\x9A', 
		'\x9B', '\a', '\x4', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x30', '\x19', 
		'\x2', '\x9C', '\v', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', 
		'J', '&', '\x2', '\x9E', '\r', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', '(', '\x15', '\x2', '\xA0', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\a', '\x5', '\x2', '\x2', '\xA2', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\a', '\x6', '\x2', '\x2', '\xA4', '\xA5', 
		'\a', ':', '\x2', '\x2', '\xA5', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\a', '\a', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x4', '\x3', 
		'\x2', '\xA8', '\xA9', '\a', '\b', '\x2', '\x2', '\xA9', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\t', '\x2', '\x2', '\xAB', 
		'\xAC', '\x5', '\x32', '\x1A', '\x2', '\xAC', '\xAD', '\a', '\a', '\x2', 
		'\x2', '\xAD', '\xAE', '\x5', '\x4', '\x3', '\x2', '\xAE', '\xAF', '\a', 
		'\b', '\x2', '\x2', '\xAF', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\n', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x4', '\x3', 
		'\x2', '\xB2', '\xB3', '\a', '\v', '\x2', '\x2', '\xB3', '\xB4', '\x5', 
		'\x32', '\x1A', '\x2', '\xB4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '\f', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x32', '\x1A', 
		'\x2', '\xB7', '\xB8', '\a', '\r', '\x2', '\x2', '\xB8', '\xC0', '\x5', 
		'\x4', '\x3', '\x2', '\xB9', '\xBA', '\a', '\xE', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', '\x32', '\x1A', '\x2', '\xBB', '\xBC', '\a', '\r', '\x2', 
		'\x2', '\xBC', '\xBD', '\x5', '\x4', '\x3', '\x2', '\xBD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\xF', '\x2', '\x2', '\xC4', '\xC6', '\x5', '\x4', '\x3', 
		'\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC8', '\a', '\b', '\x2', '\x2', '\xC8', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', '\x10', '\x2', '\x2', '\xCA', '\xCB', '\a', 
		':', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x4', '\x2', '\x2', '\xCC', 
		'\xCD', '\x5', '\x32', '\x1A', '\x2', '\xCD', '\xCE', '\a', '\x11', '\x2', 
		'\x2', '\xCE', '\xD1', '\x5', '\x32', '\x1A', '\x2', '\xCF', '\xD0', '\a', 
		'\x11', '\x2', '\x2', '\xD0', '\xD2', '\x5', '\x32', '\x1A', '\x2', '\xD1', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', 
		'\a', '\x2', '\x2', '\xD4', '\xD5', '\x5', '\x4', '\x3', '\x2', '\xD5', 
		'\xD6', '\a', '\b', '\x2', '\x2', '\xD6', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\x10', '\x2', '\x2', '\xD8', '\xD9', '\x5', 
		'.', '\x18', '\x2', '\xD9', '\xDA', '\a', '\x12', '\x2', '\x2', '\xDA', 
		'\xDB', '\x5', '\x30', '\x19', '\x2', '\xDB', '\xDC', '\a', '\a', '\x2', 
		'\x2', '\xDC', '\xDD', '\x5', '\x4', '\x3', '\x2', '\xDD', '\xDE', '\a', 
		'\b', '\x2', '\x2', '\xDE', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\a', '\x13', '\x2', '\x2', '\xE0', '\xE1', '\x5', '*', '\x16', 
		'\x2', '\xE1', '\xE2', '\x5', 'X', '-', '\x2', '\xE2', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE4', '\a', '\x14', '\x2', '\x2', '\xE4', '\xE5', 
		'\a', '\x13', '\x2', '\x2', '\xE5', '\xE6', '\x5', '*', '\x16', '\x2', 
		'\xE6', '\xE7', '\x5', 'X', '-', '\x2', '\xE7', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\a', '\x14', '\x2', '\x2', '\xE9', '\xEC', '\x5', 
		'.', '\x18', '\x2', '\xEA', '\xEB', '\a', '\x4', '\x2', '\x2', '\xEB', 
		'\xED', '\x5', '\x30', '\x19', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xF0', '\a', '\x15', '\x2', '\x2', '\xEF', 
		'\xF1', '\x5', '\x30', '\x19', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF4', '\a', '\x3', '\x2', '\x2', '\xF3', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\'', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\a', 
		'\x16', '\x2', '\x2', '\xF6', '\xF7', '\a', ':', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '\x16', '\x2', '\x2', '\xF8', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFE', '\a', ':', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'\x17', '\x2', '\x2', '\xFB', '\xFD', '\a', ':', '\x2', '\x2', '\xFC', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x103', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\a', '\x18', '\x2', 
		'\x2', '\x102', '\x104', '\a', ':', '\x2', '\x2', '\x103', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x105', '\x10A', '\x5', 'N', '(', '\x2', 
		'\x106', '\x107', '\a', '\x11', '\x2', '\x2', '\x107', '\x109', '\x5', 
		'N', '(', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x112', '\a', ':', '\x2', '\x2', '\x10E', '\x10F', '\a', '\x11', '\x2', 
		'\x2', '\x10F', '\x111', '\a', ':', '\x2', '\x2', '\x110', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x114', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '/', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x11A', '\x5', '\x32', '\x1A', '\x2', '\x116', 
		'\x117', '\a', '\x11', '\x2', '\x2', '\x117', '\x119', '\x5', '\x32', 
		'\x1A', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\b', '\x1A', '\x1', '\x2', '\x11E', '\x128', '\x5', 
		'\x34', '\x1B', '\x2', '\x11F', '\x128', '\x5', '\x36', '\x1C', '\x2', 
		'\x120', '\x128', '\x5', '\x38', '\x1D', '\x2', '\x121', '\x128', '\x5', 
		':', '\x1E', '\x2', '\x122', '\x128', '\x5', '<', '\x1F', '\x2', '\x123', 
		'\x128', '\x5', '>', ' ', '\x2', '\x124', '\x128', '\x5', '@', '!', '\x2', 
		'\x125', '\x128', '\x5', '\x42', '\"', '\x2', '\x126', '\x128', '\x5', 
		'\x44', '#', '\x2', '\x127', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x127', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x121', '\x3', '\x2', '\x2', '\x2', '\x127', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x124', '\x3', '\x2', '\x2', '\x2', '\x127', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\f', '\f', '\x2', 
		'\x2', '\x12A', '\x12B', '\x5', '\x46', '$', '\x2', '\x12B', '\x12C', 
		'\x5', '\x32', '\x1A', '\r', '\x12C', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', 
		'\a', '\x19', '\x2', '\x2', '\x133', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\t', '\x2', '\x2', '\x2', '\x135', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x136', '\x137', '\x5', 'v', '<', '\x2', '\x137', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x5', 'x', '=', '\x2', 
		'\x139', ';', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x1C', 
		'\x2', '\x2', '\x13B', '=', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\x5', 'V', ',', '\x2', '\x13D', '?', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13F', '\x5', 'H', '%', '\x2', '\x13F', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\x5', '\\', '/', '\x2', '\x141', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\x5', 'r', ':', '\x2', '\x143', 
		'\x144', '\x5', '\x32', '\x1A', '\x2', '\x144', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x145', '\x14D', '\x5', 'n', '\x38', '\x2', '\x146', '\x14D', 
		'\x5', 'l', '\x37', '\x2', '\x147', '\x14D', '\x5', 'j', '\x36', '\x2', 
		'\x148', '\x14D', '\x5', 'h', '\x35', '\x2', '\x149', '\x14D', '\x5', 
		'\x66', '\x34', '\x2', '\x14A', '\x14D', '\x5', '\x64', '\x33', '\x2', 
		'\x14B', '\x14D', '\x5', 'p', '\x39', '\x2', '\x14C', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x146', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', 'G', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x152', '\x5', 'L', 
		'\'', '\x2', '\x14F', '\x151', '\x5', 'R', '*', '\x2', '\x150', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x153', 'I', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x157', '\x5', 'L', '\'', 
		'\x2', '\x156', '\x158', '\x5', 'R', '*', '\x2', '\x157', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', 'K', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x161', '\x5', 
		'N', '(', '\x2', '\x15C', '\x15D', '\a', '\x1D', '\x2', '\x2', '\x15D', 
		'\x15E', '\x5', '\x32', '\x1A', '\x2', '\x15E', '\x15F', '\a', '\x1E', 
		'\x2', '\x2', '\x15F', '\x161', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x161', 'M', '\x3', '\x2', '\x2', '\x2', '\x162', '\x169', '\a', ':', 
		'\x2', '\x2', '\x163', '\x164', '\a', '\x1D', '\x2', '\x2', '\x164', '\x165', 
		'\x5', '\x32', '\x1A', '\x2', '\x165', '\x166', '\a', '\x1E', '\x2', '\x2', 
		'\x166', '\x167', '\x5', 'P', ')', '\x2', '\x167', '\x169', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x162', '\x3', '\x2', '\x2', '\x2', '\x168', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16C', '\x5', 'P', ')', '\x2', '\x16B', '\x16A', '\x3', '\x2', 
		'\x2', '\x2', '\x16C', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', 'O', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x16D', '\x3', '\x2', 
		'\x2', '\x2', '\x170', '\x172', '\x5', 'R', '*', '\x2', '\x171', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\a', '\x1F', '\x2', 
		'\x2', '\x177', '\x178', '\x5', '\x32', '\x1A', '\x2', '\x178', '\x179', 
		'\a', ' ', '\x2', '\x2', '\x179', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17A', '\x17B', '\a', '\x17', '\x2', '\x2', '\x17B', '\x17D', '\a', 
		':', '\x2', '\x2', '\x17C', '\x176', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x17D', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x17F', '\a', '\x18', '\x2', '\x2', '\x17F', '\x181', 
		'\a', ':', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x183', '\x5', 'T', '+', '\x2', '\x183', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x184', '\x186', '\a', '\x1D', '\x2', 
		'\x2', '\x185', '\x187', '\x5', '\x30', '\x19', '\x2', '\x186', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18C', '\a', 
		'\x1E', '\x2', '\x2', '\x189', '\x18C', '\x5', '\\', '/', '\x2', '\x18A', 
		'\x18C', '\x5', 'x', '=', '\x2', '\x18B', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18E', '\a', '\x13', '\x2', '\x2', '\x18E', '\x18F', '\x5', 
		'X', '-', '\x2', '\x18F', 'W', '\x3', '\x2', '\x2', '\x2', '\x190', '\x192', 
		'\a', '\x1D', '\x2', '\x2', '\x191', '\x193', '\x5', 'Z', '.', '\x2', 
		'\x192', '\x191', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x195', '\a', '\x1E', '\x2', '\x2', '\x195', '\x196', '\x5', '\x4', '\x3', 
		'\x2', '\x196', '\x197', '\a', '\b', '\x2', '\x2', '\x197', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x19B', '\x5', '.', '\x18', '\x2', '\x199', 
		'\x19A', '\a', '\x11', '\x2', '\x2', '\x19A', '\x19C', '\a', '\x1C', '\x2', 
		'\x2', '\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19F', '\a', '\x1C', '\x2', '\x2', '\x19E', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', '\a', '!', '\x2', '\x2', 
		'\x1A1', '\x1A3', '\x5', '^', '\x30', '\x2', '\x1A2', '\x1A1', '\x3', 
		'\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\a', '\"', '\x2', 
		'\x2', '\x1A5', ']', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1AC', '\x5', 
		'`', '\x31', '\x2', '\x1A7', '\x1A8', '\x5', '\x62', '\x32', '\x2', '\x1A8', 
		'\x1A9', '\x5', '`', '\x31', '\x2', '\x1A9', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1B1', '\x5', '\x62', '\x32', '\x2', '\x1B0', '\x1AF', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B1', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '\x1F', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\x5', '\x32', '\x1A', '\x2', '\x1B4', '\x1B5', '\a', 
		' ', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x4', '\x2', '\x2', '\x1B6', 
		'\x1B7', '\x5', '\x32', '\x1A', '\x2', '\x1B7', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8', '\x1B9', '\a', ':', '\x2', '\x2', '\x1B9', '\x1BA', 
		'\a', '\x4', '\x2', '\x2', '\x1BA', '\x1BD', '\x5', '\x32', '\x1A', '\x2', 
		'\x1BB', '\x1BD', '\x5', '\x32', '\x1A', '\x2', '\x1BC', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1BC', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1BF', '\t', '\x3', '\x2', '\x2', '\x1BF', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '#', '\x2', '\x2', '\x1C1', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '$', '\x2', 
		'\x2', '\x1C3', 'g', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\t', 
		'\x4', '\x2', '\x2', '\x1C5', 'i', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\a', '+', '\x2', '\x2', '\x1C7', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\t', '\x5', '\x2', '\x2', '\x1C9', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA', '\x1CB', '\t', '\x6', '\x2', '\x2', '\x1CB', 'o', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\t', '\a', '\x2', '\x2', 
		'\x1CD', 'q', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\t', '\b', 
		'\x2', '\x2', '\x1CF', 's', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', 
		'\a', '\x39', '\x2', '\x2', '\x1D1', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2', '\x1D3', '\t', '\t', '\x2', '\x2', '\x1D3', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x1D4', '\x1D5', '\t', '\n', '\x2', '\x2', '\x1D5', 'y', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x80', '\x84', '\x95', '\xC0', '\xC5', 
		'\xD1', '\xEC', '\xF0', '\xF3', '\xFE', '\x103', '\x10A', '\x112', '\x11A', 
		'\x127', '\x12F', '\x14C', '\x152', '\x159', '\x160', '\x168', '\x16D', 
		'\x173', '\x17C', '\x180', '\x186', '\x18B', '\x192', '\x19B', '\x19E', 
		'\x1A2', '\x1AC', '\x1B0', '\x1BC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
